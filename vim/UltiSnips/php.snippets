snippet f "Public function" b
public function ${1:name}(${2}) {
	${3}
}
$0
endsnippet

snippet pub "Public function" b
public function ${1:name}(${2}) {
	${3}
}
$0
endsnippet

snippet pubs "Public static function" b
public static function ${1:name}(${2}) {
	${3}
}
$0
endsnippet

snippet pri "Private function" b
private function ${1:name}(${2}) {
	${3}
}
$0
endsnippet

snippet pris "Private static function" b
private static function ${1:name}(${2}) {
	${3}
}
$0
endsnippet

snippet pro "Protected function" b
protected function ${1:name}(${2}) {
	${3}
}
$0
endsnippet

snippet class
<?php

class ${1} {
	${2}
}
endsnippet

snippet __c "__construct()" b
public function __construct(${1:$dependencies}) {${1/\$(\w+)(, )*/\n\t\t$this->$1 = $$1;/g}
}
$0
endsnippet

snippet t- "this->" i
this->
endsnippet

snippet t. "$this->" i
$this->
endsnippet

snippet ti "this identity" b
$this->${1} = $$1;
endsnippet

snippet A: "A::method()"
A::${1}(
	${2},
	function(${3}) {
		return ${4};
	}
);
endsnippet

snippet get "getter" b
public function ${1}() {
	return $this->${2};
}
$0
endsnippet

snippet ret
return ${1};
endsnippet

snippet apri
private $${1};
endsnippet

snippet apro
protected $${1};
endsnippet

snippet req
require_once '${1}';
endsnippet

snippet du "Dump" b
dump($${1});
endsnippet

snippet dt "Dump Trace" b
dumpTrace(${0});
endsnippet

snippet todo "// TODO " b
// TODO: $0
endsnippet

snippet fixme "// FIXME " b
// FIXME$0
endsnippet

snippet group "test group"
/**
 * @group ${0}
 */
endsnippet

snippet ae "Assert equal"
$this->assertEqual(${1}, ${2});
endsnippet

snippet ee "Expect exception"
$this->expectException(${1:$expected});
endsnippet

snippet th "throw Exception"
throw new ${0:Exception}();
endsnippet

snippet echo "<?php echo ?>" i
<?php echo ${0} ?>
endsnippet
