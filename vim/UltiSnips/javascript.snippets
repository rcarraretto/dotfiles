# vim: set foldmethod=marker:

snippet if "if (condition) { ... }"
if ($1) {
	${0:${VISUAL}}
}
endsnippet

snippet cl "console.log"
console.log(${0});
endsnippet

snippet co "console.log json"
console.log(JSON.stringify($0, null, 4));
endsnippet

snippet todo "// TODO " b
// TODO: $0
endsnippet

snippet ret
return $0;
endsnippet

# Test -------------------------------------------------------------------- {{{

snippet des "describe"
describe('$1', function() {
	$2
});
endsnippet

snippet it "it"
it('$1', async () => {
	$2
});
endsnippet

snippet before "before"
before(async () => {
	$1
});
endsnippet

snippet bE "beforeEach"
beforeEach(async () => {
	$1
});
endsnippet

snippet after "after"
after(async () => {
	$1
});
endsnippet

snippet aE "afterEach"
afterEach(async () => {
	$1
});
endsnippet

snippet exp "expect equal" b
expect($1).to.equal($2);
endsnippet

# }}}

snippet vf "var function"
var ${1:function_name} = function(${2}) {
	${VISUAL}$0
};
endsnippet

snippet cf "const function"
const ${1} = (${2}) => {
	${VISUAL}$0
};
endsnippet

snippet f "function"
function($1) {
	$2
};
endsnippet

snippet th "throw new Error"
throw new Error($0);
endsnippet

snippet req "require"
const $2 = require('$1');
endsnippet

snippet r* "require complete module"
const $1 = require('${1}');
endsnippet

snippet r_ "require lodash"
const _ = require('lodash');
endsnippet

snippet tapo "log lodash chain"
.tap(i => console.log(JSON.stringify(i, null, 4)))
endsnippet
